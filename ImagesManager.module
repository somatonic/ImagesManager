<?php

/**
 * Images Manager ProcessWire2
 *
 * @author Philipp 'Soma' Urlich, philipp at urlich dot ch
 * @date_created 01/04/2013
 *
 * ProcessWire 2.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class ImagesManager extends Process implements Module, ConfigurableModule {

    /**
     * getModuleInfo is a module required by all modules to tell ProcessWire about them
     *
     * @return array
     *
     */
    public static function getModuleInfo() {
        return array(
            'title' => 'Images Manager',
            'summary' => 'Manage and search images from one resource tree. Upload images and create new categories.',
            'version' => 12,
            'href' => '',
            'author' => 'Soma',
            'installs' => array('ImagesManagerParser'),
            'permission' => 'images-manager'
        );
    }

    protected static $defaults = array(
        'imagesRoot' => '/images/',
        'imagesPageTemplate' => 'image',
        'imagesFieldName' => 'image',
        'imagesCategoryTemplate' => 'image-category',
        'imagesDescriptionField' => 'image_description',
        'imagesEXIFField' => 'image_exif',
        'textareaFields' => null,
        'maxFiles' => 50,
        'listerLimit' => 20,
        'listerDateFormat' => "Y.m.d H:i:s"
    );

    protected $columns = array(
        // "id" => array('ID'),// member nr
        "image" => array('Image'), // anrede
        "title" => array('Infos'),
        "parent" => array('Category'),
        // "imagetag" => array('Tag'),
        "production" => array('Produktion'),
        // "quelle_text" => array('Quelle Text'),
        // "found" => array('Search'),
        "modified" => array('Mod.'),
        "actions" => array('')
    );

    protected $filters = array(
        'sort',
        'parent',
        'searchquery'
        );

    protected $selectorDefault;

    public function init() {

        $this->modal = $this->input->get->modal ? '?modal=1' : '' ;
        if($this->input->get->modal) {
            $this->input->whitelist("modal", $this->input->get->modal);
        }

        $this->config->js("imagemanager", (object) array("url" => $this->page->url));

        $this->modules->MarkupAdminDataTable;
        $this->modules->JqueryMagnific;
        $this->modules->JqueryUI->use("modal");

        // set options for this module
        $this->options = array_merge(self::$defaults, $this->data);

        // default selector for images pages search
        $this->selectorDefault = "template={$this->options['imagesPageTemplate']}, include=all, sort=-modified, limit={$this->options['listerLimit']}";

        parent::init();

    }

    /**
     * Handle the main/default ImagesManager screen markup
     *
     * @return string output of the markup
     */
    public function execute() {

        // if some post values sent
        if(count($_POST)) $this->processInput();

        // if an ajax request return results
        if(wire("config")->ajax) return $this->renderResults();

        // set headline of IM admin page
        $minfo = self::getModuleInfo();
        $this->setFuel('processHeadline', $minfo['title']);

        $out = '';
        // if(!$this->modal) $out .= $this->buildActionsTab()->render();
        $out .= $this->buildActionsTab()->render();
        $out .= $this->buildFiltersForm()->render();
        $out .= "<div id='{$this->className()}List'>loading...</div>";

        return $out;

    }

    /**
     * Handle upload of images saved to a page
     *
     * @return string output of the markup
     */
    public function executeUpload() {

        $this->config->js("im_alert_parentpage", $this->_("Please select a parent first."));

        $minfo = self::getModuleInfo();
        $this->fuel('breadcrumbs')->add(new Breadcrumb('../', $minfo['title']));
        $this->setFuel('processHeadline', $this->_('Upload New Images'));

        $out = "";

        // show uploaded images if get present

        if($this->input->get->uploaded){
            $imageIDs = $this->pages->find("id={$this->input->get->uploaded}");
            if($imageIDs->count()) {
                $out .= "<div id='ImagesManagerUploaded' data-images='$imageIDs'><h2>Uploaded Images</h2>";
                $out .= $this->buildTable($imageIDs)->render();
                $out .= "</div>";
            }
        }

        $form = $this->modules->get('InputfieldForm');
        $form->action = './';
        $form->attr("id",'ImagesManagerUploadForm');
        $form->method = 'post';

        if($this->input->get->modal){
            $field = $this->modules->get('InputfieldHidden');
            $field->attr('id+name','modal');
            $field->attr('value',1);
            $form->append($field);
        }

        $field = $this->modules->get('InputfieldSelect');
        $field->label = $this->_('Select category');
        $field->required = 1;
        $field->description = $this->_('First select the category to want to upload images to.');
        $field->attr('name','ParentPage');
        $children = $this->pages->get($this->options['imagesRoot'])->children("include=hidden");
        if($children->count()){
            $field->addOption("", $this->_("select category"));
            $this->listCategoryTree($children,$field);
        } else {
            $field->addOption("", $this->_("no categories found!"));
            $this->error($this->_("There's no image category yet."));
        }
        $form->append($field);

        $field = $this->modules->get('InputfieldImage');
        $field->label = $this->_('Upload Images');
        $field->description = sprintf($this->_('Upload max %s images at once.'),$this->options['maxFiles']);
        $field->attr('name','ImagesUpload');
        $field->showIf = "ParentPage>0";

        $image_field = $this->fields->get($this->options['imagesFieldName']);
        if(!$image_field) throw new WireException("Image field could not be found. Make sure the image field '".$this->options["imagesFieldName"]."' exists.");

        $field->required = 1;
        $field->maxWidth = $image_field->maxWidth;
        $field->maxHeight = $image_field->maxHeight;
        $field->extensions = $image_field->extensions;
        $field->maxFiles = $this->options['maxFiles'];
        // make sure the value is of type Pageimages
        $field->attr("value", new Pageimages($this->page));
        $form->append($field);

        $field = $this->modules->get('InputfieldSubmit');
        $field->attr('value',$this->_('Upload'));
        $field->attr('name+id','submit');
        $form->append($field);

        $field = $this->modules->get('InputfieldButton');
        $field->attr('value',$this->_('Back'));
        $field->attr('name+id','back');
        $modal = $this->input->get->modal ? '?modal=1' : '';
        $field->href = "../$modal";
        $form->append($field);

        if($this->input->post->submit) {

            $errors = false;
            $form->processInput($this->input->post);
            $parentPageField = $form->get('ParentPage');
            $parentPageValue = $parentPageField->attr("value");

            // hacky way to get upload max files errors on image fieltypes
            // since it uses notices to populate errors (?? TODO ask Ryan)
            if($this->notices->hasErrors()) {
                $errors = true;
                // remove unwanted messages keeping only the error message
                foreach($this->notices as $notice){
                    if($notice instanceof NoticeMessage){
                        $this->notices->remove($notice);
                    }
                }
            }

            if(!count($form->getErrors()) && !$errors) {
                // save uploaded files to new page and remove temp files
                $files = explode('|',$form->get('ImagesUpload')->value);

                $uploadedImages = new PageArray();

                foreach($files as $file){
                    // if($file && file_exists($this->upload_path . $file)){
                    if($file && file_exists($this->page->filesManager->path . $file)){
                        $imagepage = new Page();
                        $imagepage->template = $this->options['imagesPageTemplate'];
                        $imagepage->parent = $parentPageValue;
                        $info = pathinfo($file);
                        $file_name = $info['filename'];
                        $imagepage->title = $file_name;
                        $imagepage->save();

                        // set alternative languages active
                        if($this->wire("modules")->isInstalled("LanguageSupportPageNames")) {
                            foreach($this->languages as $lang) {
                                if($lang->isDefault()) continue;
                                $imagepage->set("status". $lang->id, 1);
                            }
                        }

                        // set EXIF meta data
                        $this->setMetaData($imagepage, $this->upload_path . $file);

                        // create new PageImage to get max width and height setting of image field working
                        // $img = new Pageimage($imagepage->get($this->options['imagesFieldName']), $this->upload_path . $file);
                        $img = new Pageimage($imagepage->get($this->options['imagesFieldName']), $this->page->filesManager->path . $file);
                        $imagepage->get($this->options['imagesFieldName'])->add($img);
                        unlink($this->page->filesManager->path . $file);
                        $imagepage->save();
                        $uploadedImages->add($imagepage);
                    }
                }
                // redirect to the form
                $this->session->redirect($this->page->url . "upload/?uploaded=$uploadedImages");
                // $out .= $this->buildTable($uploadedImages)->render();
                // return $out;
                //
            } else {
                // remove uploaded files in case of an error processing the form
                $files = explode('|',$form->get('ImagesUpload')->value);
                if(count($files)){
                    foreach($files as $file){
                        if($file && file_exists($this->page->filesManager->path . $file)){
                            unlink($this->page->filesManager->path . $file);
                        }
                    }
                    $this->message($this->_("Form contained errors. Removed uploaded images."));
                }

            }
        }

        $out .= $form->render();
        return $out;

    }


    /**
     * Handle the category add screen
     *
     * @return string markup output
     */
    public function executeAddCategory(){

        $out = '';
        $minfo = self::getModuleInfo();

        $this->fuel('breadcrumbs')->add(new Breadcrumb('../', $minfo['title']));
        $this->setFuel('processHeadline', $this->_('Add New Category'));

        $out = '';

        $form = $this->modules->get('InputfieldForm');
        $form->action = './';
        $form->method = 'post';

        if($this->input->get->modal){
            $field = $this->modules->get('InputfieldHidden');
            $field->attr('id+name','modal');
            $field->attr('value',1);
            $form->append($field);
        }

        $field = $this->modules->get('InputfieldPageListSelect');
        $field->label = $this->_('Select parent category');
        $field->parent_id = $this->pages->get($this->options['imagesRoot'])->id;
        $field->attr('name','ParentCategory');
        $field->description = $this->_('Select a category to add a subcategory to, or leave blank to create one in the root.');
        $form->append($field);

        $field = $this->modules->get('InputfieldPageTitle');
        $field->label = 'Title';
        $field->required = 1;
        $field->attr('name','title');
        $form->append($field);

        $field = $this->modules->get('InputfieldPageName');
        $field->attr('name','_pw_page_name');
        $form->append($field);

        $field = $this->modules->get('InputfieldSubmit');
        $field->attr('value',$this->_('Add category'));
        $field->attr('name+id','submit');
        $form->append($field);

        $field = $this->modules->get('InputfieldButton');
        $field->attr('value',$this->_('Back'));
        $field->attr('name+id','back');
        $modal = $this->input->get->modal ? '?modal=1' : '';
        $field->href = "../$modal";
        $form->append($field);

        if($this->input->post->submit){

            $this->notices->remove('error');

            $form->processInput($this->input->post);

            if(!count($form->getErrors())){
                $page_title = $form->get('title')->value;
                $page_name = $form->get('_pw_page_name')->value;

                if($this->input->post->ParentCategory != 0){
                    $page_parent = $this->pages->get($this->input->post->ParentCategory);
                } else {
                    $page_parent = $this->pages->get($this->options['imagesRoot']);
                }
                $found = $this->pages->count("parent=$page_parent,name=$page_name");
                if($found){
                    $form->get('_pw_page_name')->error($this->_('Category already exists with the same name.'));
                } else {
                    $categorypage = new Page();
                    $categorypage->template = $this->options['imagesCategoryTemplate'];
                    $categorypage->parent = $page_parent;

                    $categorypage->title = $page_title;
                    $categorypage->name = $page_name;
                    $categorypage->save();
                    $this->message(sprintf($this->_('New category added at %s'),$categorypage->url));
                    $form->get('title')->value = '';
                    $form->get('_pw_page_name')->value = '';
                }

            }
        }

        $out .= $form->render();

        return $out;
    }


    /**
     * Set a Lister session variable
     *
     * @param string $key
     * @param string|int $value
     *
     */
    public function sessionSet($key, $value) {
        $key = $this->page->name . "_" . $this->className() . "_" . $key;
        if(is_null($value)) $this->session->remove($key);
            else $this->session->set($key, $value);
    }

    /**
     * Get a session variable
     *
     * @param string $key
     * @return string|int|null
     *
     */
    public function sessionGet($key) {
        $key = $this->page->name . "_" . $this->className() . "_" . $key;
        return $this->session->get($key);
    }

    /**
     * Clear all session variables
     *
     */
    public function sessionClear() {
        $name = $this->page->name;
        foreach($this->session as $key => $value) {
            if(strpos($key, "{$name}_" . $this->className() . "_") === 0) $this->session->remove($key);
        }
    }

    /**
     * Process input for each filter var and save in session
     *
     */
    protected function processInput() {
        // save filter form in session
        foreach($this->filters as $f){
            $val = $this->sanitizer->text($this->input->post($f));
            $this->sessionSet($f, $val);
        }

    }

    /**
     * Construct the selector for the search
     * @return string selector string
     */
    public function getSelector(){

        $selector = $this->selectorDefault;

        foreach(wire("input")->post as $key => $value) {

            $operator = "=";

            if(wire("fields")->get($key)->type == 'FieldtypeText'){
                $operator = "%=";
            }
            if(wire("fields")->get($key)->type == 'FieldtypeEmail'){
                $operator = "%=";
            }
            if(wire("fields")->get($key)->type == 'FieldtypePage'){
                if(!$value) continue;
            }
            if($key == 'name'){
                if(!$value) continue;
                $operator = "%=";
            }
            if($key == 'parent'){
                $operator = "=";
                if(!$value) {
                    $value = $this->pages->get($this->options['imagesRoot'])->id;
                    $key = "has_parent";
                }
            }
            if($key == 'searchquery'){
                if(!$value) continue;
                if(is_numeric($value)){
                    $key = "id";
                    $operator = "=";
                } else {
                    $key = "title|{$this->options['imagesFieldName']}.description|select_production.title|select_person.title";
                    $tpl = $this->templates->get($this->options['imagesPageTemplate']);
                    if($tpl->hasField($this->options['imagesDescriptionField'])){
                        $key .= "|{$this->options['imagesDescriptionField']}";
                    }
                    $operator = "%=";
                }

            }

            if($key == 'sort'){
                if(!$value) continue;
                if($value == "-filesize" || $value == "filesize"){
                    continue;
                }
            }

            $selector .= ", $key{$operator}" . $value;
        }

        return $selector;
    }

    /**
     * Render the results list
     * @return string markup of the results
     */
    public function renderResults(){

        $selector = $this->getSelector();

        $out = '';
        $stats = '';

        $results = wire("pages")->find($selector);

        if($results->count()){
            $table = $this->buildTable($results);
            $tableOut = $table->render();
            $total = $results->getTotal();
            $start = $results->getStart() + 1;
            $end = $results->getStart() + $results->getLimit();
            if($end > $total) $end = $total;
            $stats = sprintf($this->_('Results: %1$s - %2$s of %3$s'), $start, $end, $total);
        } else {
            $tableOut = "<p class='ui-state-error'>&nbsp;" . $this->_("No images found...") . " </p>";
        }

        $pagerOut = $results->renderPager();

        return $out . $stats . $pagerOut . $tableOut . $pagerOut . "<p class='im_selector'>Selector: $selector</p>";

    }

    /**
     * Build the table results
     * @param  PageArray $results found pages array
     * @return InputfieldWrapper             table
     */
    public function buildTable(PageArray $results){

        $table = $this->modules->get('MarkupAdminDataTable');
        $table->setEncodeEntities(false);
        $table->setSortable(false);

        $header = array();
        foreach($this->columns as $field => $settings){
            $label = $settings[0];
            $header[$field] = "$label<b>$field<b>"; // $field hidden for sorting
        }
        $table->headerRow($header);

        foreach($results as $res){

            // get status'
            $editable = $res->editable();
            $unpublished = $res->is(Page::statusUnpublished);
            $viewable = $res->viewable();
            $this->modal = 1;
            $values = array();
            $res->of(false);

            foreach($header as $field => $settings){

                $value = '';

                if($field == "actions") {
                    if($editable){
                        if($this->modal) $modal = "&modal=1";
                        $value = "<a class='pw-modal' data-buttons='#submit_save' href='{$this->wire('config')->urls->admin}page/edit/?id=$res->id{$modal}'><span class='fa fa-edit'></span> Edit</a>";
                    } else {
                        $value = '';
                    }
                } else if($field == "modified") {
                    $value = date($this->options['listerDateFormat'], $res->get($field));

                } else if($field == "image"){
                    $thumb = '#';
                    if($res->image->count()){
                        $imageUrl = $res->image->first->url;
                        $thumb = $res->image->first->size(120,0)->url;
                    }
                    $value = "<a href='{$imageUrl}' class='im_magnific'><img src='{$thumb}'/></a>";

                }  else if($field == "found"){

                    $search_url = wire("config")->urls->admin . "page/search/";
                    // $fieldsArray = $this->_convertFieldsIdToName($this->options['textareaFields']);
                    $fieldsArray = $this->_convertFieldsIdToName($this->options['textareaFields']);
                    $fieldsArray[] = 'select_images';
                    $fieldsSearchStr = implode("+", $fieldsArray);

                    $search_param = "?field={$fieldsSearchStr}";
                    $search_param .= "&q=$res->id";
                    $search_param .= "&operator=8";
                    $search_param .= "&show_options=1";
                    $search_param .= "&submit=Search";
                    $search_param .= "&sort=relevance";
                    $search_param .= "&display=title,path";
                    if($this->modal) $search_param .= "&modal=1";
                    $value = "<a class='pw-modal' href='{$search_url}{$search_param}'>" . $this->_('search') . "</a>";

                } else if($field == "imagetag") {
                    // $value = "<div class='imagesmanager_tagfield_wrapper'><input type='text' class='imagesmanager_tagfield' value='{image=$res->id, width=200, id=$res->id}'/></div>";
                    $value = "<div class='imagesmanager_tagfield_wrapper'><input type='text' class='imagesmanager_tagfield' value='[[bild id=$res->id, ausrichtung=links, breite=halb]]'/></div>";

                } else if($field == "title") {
                    $value = "<b>$res->title</b> ";
                    $value .= "<br/>ID: {$res->id}";
                    $value .= "<br/>Grösse: {$res->image->first->filesizeStr}";
                    $value .= "<br/>Dimension: " . $res->image->first->width . " x " . $res->image->first->height . "px";

                } else if($field == "parent") {
                    $value = "{$res->parent->path}";

                } else if($field == "production"){
                    if($res->select_production) {
                        $value = $res->select_production->title;
                    }

                } else {
                    $value = $res->get($field);

                }

                $values[] = $value;
            }
            $table->row($values);
        }

        return $table;
    }


    /**
     * Convert Array of field id to their names
     * @param  array  $fields   array of field id's
     * @return array  $namedArray   array of field names
     */
    private function _convertFieldsIdToName(array $fields) {
        $namedArray = array();
        foreach($fields as $f) {
            $namedArray[] = $this->fields->get((int)$f);
        }
        return $namedArray;
    }

    /**
     * Actions fieldset with buttons to upload and add category
     * using IntpufieldMarkup to add the buttons and render it in a fieldset
     * this is easiest way to get floated buttons in one field
     *
     * @param  array  $fields   array of field id's
     * @return array  InputfieldWrapper   fieldset
     */
    public function ___buildActionsTab() {

        $moduleID = $this->modules->getModuleID("ImagesManager");
        $moduleUrl = $this->pages->get("template=admin, process=$moduleID")->url;

        $actions = $this->modules->get("InputfieldFieldset");
        $markup = $this->modules->get("InputfieldMarkup");
        $markup->label = $this->_("Create");

        $field = $this->modules->get('InputfieldButton');
        $field->attr('value',$this->_('Upload images'));
        $field->attr('id','uploadimages');
        $field->href = $moduleUrl . "upload/{$this->modal}";
        $markup->value .= $field->render();

        $field = $this->modules->get('InputfieldButton');
        $field->attr('value',$this->_('New category'));
        $field->attr('id','addcategory');
        $field->href = $moduleUrl . "./addcategory/{$this->modal}";
        $markup->value .= $field->render();
        $actions->add($markup);

        return $actions;
    }

    /**
     * Build the filters form object
     * @return InputfieldForm form object
     */
    public function ___buildFiltersForm() {

        $form = $this->modules->get('InputfieldForm');
        $form->id = $this->className() . "Filter";
        $form->method = 'get';
        $form->action = "./{$this->modal}";

        $fs = $this->modules->get("InputfieldFieldset");
        $fs->label = "Filters";

        $f = $this->modules->get('InputfieldHidden');
        $f->attr('name', 'sort');
        $f->attr('id', 'imagesmanager_sort');
        $f->attr('value', $this->sessionGet("sort"));
        $form->add($f);

        $field = $this->modules->get('InputfieldSelect');
        $field->attr('id+name', 'parent');
        $field->skipLabel = true;
        $field->label = $this->_("Category");
        // $field->description = $this->_('Filter by category');
        $field->addOption('', $this->_('All'));
        $field->attr('value', $this->sessionGet("parent"));
        $field->columnWidth = 50;
        $field = $this->listCategoryTree($this->pages->get($this->options['imagesRoot'])->children, $field);
        $fs->add($field);

        $field = $this->modules->get("InputfieldText");
        $field->attr("id+name", "searchquery");
        $field->attr("value", $this->sessionGet("searchquery"));
        // $field->description = $this->_('Search');
        $field->label = $this->_("Search");
        $field->skipLabel = true;
        $field->columnWidth = 50;
        $fs->add($field);

        $form->add($fs);

        return $form;
    }

    /**
     * Build a category select
     * @param  PageArray $children pages array of first level children
     * @param  Field $field    the select field
     * @param  string $ind      intendation string
     * @return field           field object
     */
    public function ___listCategoryTree($children, $field, $ind = '') {
        $ind .= '—';
        foreach($children as $page) {
            // $countproducts = $this->pages->count("parent=$page,template=" . $this->options['imagesPageTemplate']);
            $countproducts = wire("pages")->count("parent=$page, template=" . $this->options['imagesPageTemplate']);
            $field->addOption($page->id, " " . $ind . " " . $page->title ." ($countproducts)");
            $children = $page->children('template=' . $this->options['imagesCategoryTemplate']);
            if(count($children)) {
                $this->listCategoryTree($children,$field,$ind);
            }
        }
        return $field;
    }

    /**
     * Method to hook into, if the field exists on image template
     * it will save a simple exif data string
     *
     * @param  Page   $page the image page
     * @param  string $file filename
     */
    public function ___setMetaData(Page $page, $file) {
        // write exif data if field exists on page
        if($page->template->fieldgroup->hasField($this->options['imagesEXIFField'])) {
            $exif = exif_read_data($file, 0, true);
            if($exif) {
                $page->set($this->options['imagesEXIFField'], json_encode($exif));
            }
        }
    }

    public function ___install() {
        $page = $this->pages->get('template=admin, name=imagesmanager');
        if (!$page->id) {
            $page = new Page();
            $page->template = 'admin';
            $page->parent = $this->pages->get(2);
            $page->title = 'ImagesManager';
            $page->name = 'imagesmanager';
            $page->process = $this;
            $page->save();
        }
    }

    public function ___uninstall() {
        $page = $this->pages->get('template=admin, name=imagesmanager');
        if ($page->id) $page->delete();
    }


    static public function getModuleConfigInputfields(array $data) {

        $data = array_merge(self::$defaults, $data);

        $fields = new InputfieldWrapper();
        $modules = wire('modules');

        $fieldset = $modules->get("InputfieldFieldset");
        $fieldset->label = "Image template & field settings";

        $field = $modules->get('InputfieldText');
        $field->attr('name', 'imagesRoot');
        $field->attr('size',20);
        $field->attr('value', $data['imagesRoot']);
        $field->set('collapsed', Inputfield::collapsedBlank);
        $field->label = 'Root Images Page URL';
        $field->description = 'The URL of the root page where the images are stored.';
        $fieldset->append($field);

        $field = $modules->get('InputfieldText');
        $field->attr('name', 'imagesPageTemplate');
        $field->attr('size',20);
        $field->attr('value', $data['imagesPageTemplate']);
        $field->set('collapsed', Inputfield::collapsedBlank);
        $field->label = 'Image Templatename';
        $field->description = 'Template to use for the images.';
        $fieldset->append($field);

        $field = $modules->get('InputfieldText');
        $field->attr('name', 'imagesFieldName');
        $field->attr('size',20);
        $field->attr('value', $data['imagesFieldName']);
        $field->set('collapsed', Inputfield::collapsedBlank);
        $field->label = 'Image Field';
        $field->description = 'Image field name you use for the image template. It will get field settings from this field to configure image upload in Images Manager. Allowed image extensions, max width and height.';
        $fieldset->append($field);

        $field = $modules->get('InputfieldText');
        $field->attr('name', 'imagesCategoryTemplate');
        $field->attr('size',20);
        $field->attr('value', $data['imagesCategoryTemplate']);
        $field->set('collapsed', Inputfield::collapsedBlank);
        $field->label = 'Image Category Templatename';
        $field->description = 'Template to use for the images categories.';
        $fieldset->append($field);

        $field = $modules->get('InputfieldText');
        $field->attr('name', 'imagesDescriptionField');
        $field->attr('size',20);
        $field->attr('value', $data['imagesDescriptionField']);
        $field->set('collapsed', Inputfield::collapsedBlank);
        $field->label = 'Alternative description fieldname';
        $field->description = 'Alternative description field on image page. This way you can use Language Text field.';
        $fieldset->append($field);

        $field = $modules->get('InputfieldText');
        $field->attr('name', 'imagesEXIFField');
        $field->attr('size',20);
        $field->attr('value', $data['imagesEXIFField']);
        $field->set('collapsed', Inputfield::collapsedBlank);
        $field->label = 'Meta-Data Textfield';
        $field->description = 'Textarea field for storing meta data. Add field with this name to the image template.';
        $field->description .= 'Images Manager will look for this field an store EXIF data if any found.';
        $fieldset->append($field);

        $fields->append($fieldset);

        $field = $modules->get('InputfieldAsmSelect');
        $field->attr('name', 'textareaFields');
        $field->attr('value', $data['textareaFields']);
        $textareafields = wire("fields")->find("type=FieldtypeTextarea|FieldtypeTextareaLanguage");
        foreach($textareafields as $f) $field->addOption($f->id, $f->name);
        $field->label = 'Textarea fields you want to use the ImagesManager on. A button will appear above those fields.';
        $field->description = 'Add one or more textarea fields from the select.';
        $fields->append($field);

        $field = $modules->get('InputfieldText');
        $field->attr('name', 'maxFiles');
        $field->attr('size', 10);
        $field->attr('value', $data['maxFiles']);
        $field->set('collapsed', Inputfield::collapsedBlank);
        $field->label = 'Max files';
        $field->description = 'Set the maximum files may uploaded using Images Manager.';
        $fields->append($field);


        $field = $modules->get('InputfieldInteger');
        $field->attr('name', 'listerLimit');
        $field->attr('size', 10);
        $field->attr('value', $data['listerLimit']);
        $field->set('collapsed', Inputfield::collapsedBlank);
        $field->label = 'Limit per page';
        $field->description = 'Set the limit for the result list.';
        $fields->append($field);

        $field = $modules->get('InputfieldText');
        $field->attr('name', 'listerDateFormat');
        $field->attr('size', 10);
        $field->attr('value', $data['listerDateFormat']);
        $field->set('collapsed', Inputfield::collapsedBlank);
        $field->label = 'Date format';
        $field->description = 'Define the date format used in the result list for modification date. Use a simple digit based PHP date format string.';
        $fields->append($field);


        return $fields;
    }
}
