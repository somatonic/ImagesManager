<?php

/**
 * Images Manager Parser
 *
 * @author Philipp 'Soma' Urlich, philipp at urlich dot ch
 * @date_created 01/04/2013
 *
 * ProcessWire 2.x
 * Copyright (C) 2010 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class ImagesManagerParser extends WireData implements Module {

    /**
     * getModuleInfo is a module required by all modules to tell ProcessWire about them
     *
     * @return array
     *
     */
    public static function getModuleInfo() {

        return array(
            'title' => 'Images Manager Parser',
            'version' => 12,
            'summary' => 'Add ImagesManager button to textarea fields defined in ImagesManager module, parses textarea to abstracts image tags saved in DB.',
            'href' => '',
            'author' => 'Soma',
            'singular' => true,
            'autoload' => true,
            'requires' => array('ImagesManager')
            );
    }


    public function init() {
        $options = $this->modules->getModuleConfigData('ImagesManager');
        $this->options = $options;

        // add hook to replace image tags to id tags and back
        if(isset($_SERVER['REQUEST_URI']) && strpos($_SERVER['REQUEST_URI'], $this->config->urls->admin) !== false){

            // $this->addHookAfter('FieldtypeTextarea::wakeupValue', $this, 'wakeupValue');
            // $this->addHookBefore('FieldtypeTextarea::sleepValue', $this, 'sleepValue');

            $this->addHookBefore('InputfieldTextarea::render', $this, 'addScripts');
            $this->addHookAfter('InputfieldTextarea::render', $this, 'addImagesManager');

            // for the SelectImages fieldtype only
            // $this->addHookAfter('InputfieldImagesSelect::render', $this, 'addImagesManagerCustom');

        } else {
            $this->addHookAfter('Page::render', $this, 'renderPage');
        }
    }


    public function addScripts(HookEvent $event) {
        // $this->modules->get('ImagesManager');
        // $this->modules->get('JqueryFancybox');
        $this->modules->get('JqueryMagnific');
        $this->config->scripts->add($this->config->urls->ImagesManagerParser . 'ImagesManagerParser.js');
        $this->config->styles->add($this->config->urls->ImagesManagerParser . 'ImagesManagerParser.css');
    }

    public function addImagesManager(HookEvent $event) {
        // add button to textarea fields
        $inputfield = $event->object;
        $fieldset = $event->return;

        if(!$this->user->isSuperuser() && !$this->user->hasPermission("images-manager")) return;

        // get text fields config
        if(!isset($this->options['textareaFields'])) return;
        if(!$this->fields->get($inputfield->name)) return;
        if(!in_array($this->fields->get($inputfield->name)->id, $this->options['textareaFields'])) return;

        $moduleID = $this->modules->getModuleID("ImagesManager");

        $href = $this->pages->get("template=admin, process=$moduleID")->url;
        $btn = $this->modules->get('InputfieldButton');
        $btn->href = $href;
        $btn->attr('id','imagesmanager_' . $inputfield->name);
        $btn->value = $this->_('Images Manager');

        $event->return = str_replace($event->return, $event->return . "<div class='im-widget imagesmanager-button'>{$btn->render()}</div>", $event->return);

        // add js config for urls to images manager admin page used in jquery modals
        $this->config->js("images_manager", array("url" => $this->pages->get("template=admin, process=$moduleID")->url));

    }


    public function addImagesManagerCustom(HookEvent $event) {

        $inputfield = $event->object;
        $fieldset = $event->return;

        if(!$this->user->isSuperuser() && !$this->user->hasPermission("images-manager")) return;

        $href = $this->pages->get(2)->find('name=imagesmanager,include=all')->first()->url;
        $btn = $this->modules->get('InputfieldButton');
        $btn->href = $href;
        $btn->attr('id','imagesmanager_' . $inputfield->name);
        $btn->value = $this->_('Images Manager');

        $event->return = str_replace($event->return, $event->return . "<div class='im-widget imagesmanager-button'>{$btn->render()}</div>", $event->return);

        // add js config for urls to images manager admin page used in jquery modals
        $moduleID = $this->modules->getModuleID("ImagesManager");
        $this->config->js("images_manager", array("url" => $this->pages->get("template=admin, process=$moduleID")->url));
    }

    public function wakeupValue(HookEvent $event) {

        // prevent execution (some conflicts) on field edit for tinymce textarea language fields
        if(wire('process') == 'ProcessField') return;

        // $page, $field, $value
        $page = $event->arguments(0);
        $value = $event->return;
        $field = $event->arguments("field");

        if(!isset($this->options['textareaFields'])) return;
        if(!in_array($field->id, $this->options['textareaFields'])) return;

        if(empty($value)) return;

        // replace {image=id} tags with html img tags
        if(is_object($value) && $value instanceof LanguagesPageFieldValue) {
            $value = $this->replaceLanguageValues($value);
        } else {
            $value = $this->parseTags($value);
        }

        if($this->config->debug)
            $this->message('FieldtypeTextarea (wakeupValue): ' . $page->path . ': ' . $field->name);

        $event->return = $value;
    }

    public function sleepValue(HookEvent $event) {

        // prevent execution (some conflicts) on field edit for tinymce textarea language fields
        if(wire('process') == 'ProcessField') return;

        $arguments = $event->arguments;
        $value = $arguments[2];
        $field = $arguments[1];

        if(!isset($this->options['textareaFields'])) return;
        if(!in_array($field->id, $this->options['textareaFields'])) return;

        // replace img html tags to {image=id} tags
        if(is_array($value)) {
            $value = $this->replaceLanguageValues($value, false);
        } else {
            $value = $this->parseTags($value);
            $value = $this->parseImages($value);
        }

        // for debugging:
        if($this->config->debug)
            $this->message('FieldtypeTextarea (sleepValue): ' . $arguments[0]->path . ': ' . $arguments[1]->name);

        // stuff the value back in the arguments sent to the Fieldtype
        $event->setArgument(2, $value);
    }


    public function renderPage(HookEvent $event) {
        $value = $event->return;
        $value = $this->parseTags($value);
        $event->return = $value;
    }


    public function ___replaceLanguageValues($value, $onlytags = true){

        $languages = $this->languages;

        foreach($languages as $lang) {
            $replaced_value = '';
            if($value == NULL) continue;

            // get the language value for parsing for page urls
            if(is_object($value) && $value instanceof LanguagesPageFieldValue) {
                $replaced_value = $value->getLanguageValue($lang->id);
            } else { // array
                $langID = $lang->isDefault() ? '' : $lang->id;
                $replaced_value = $value['data' . $langID];
            }

            if($replaced_value == '') continue;

            if($onlytags){
                $replaced_value = $this->parseTags($replaced_value);
            } else {
                $replaced_value = $this->parseTags($replaced_value);
                $replaced_value = $this->parseImages($replaced_value);
            }

            // set back the modified language value
            if(is_object($value) && $value instanceof LanguagesPageFieldValue) {
                $value->setLanguageValue($lang->id, $replaced_value);
            } else {
                $langID = $lang->isDefault() ? '' : $lang->id;
                $value['data' . $langID] = $replaced_value;
            }
        }
        return $value;
    }


    public function ___parseTags($value) {

        preg_match_all('#\{(image=.+?)\}#i', $value, $matches, PREG_SET_ORDER);

        if(count($matches)){

            foreach($matches as $match) {

                // to keep things easy and scalable we use PW selectors class
                $selectors = new Selectors($match[1]);

                $image_selector = $selectors->get('field=image');
                $imagepage = wire('pages')->get($image_selector->value);
                if(!$imagepage->id) continue;

                $imagepage->of(false);
                $image = $imagepage->get($this->options['imagesFieldName'])->first;
                if(!$image->width) return;

                $width_selector = $selectors->get('field=width');
                $height_selector = $selectors->get('field=height');
                $class_selector = $selectors->get('field=class');

                $width_attr = '';
                $height_attr = '';

                if($width_selector && $width_selector->value && $height_selector && $height_selector->value) {
                    $img = $image->size($width_selector->value, $height_selector->value)->url;
                    $width_attr = ' width="' . $width_selector->value . '"';
                    $height_attr = ' height="' . $height_selector->value . '"';

                } else if($width_selector && $width_selector->value) {
                    $img = $image->size($width_selector->value, 0)->url;
                    $width_attr = ' width="' . $width_selector->value . '"';

                } else if($height_selector && $height_selector->value) {
                    $img = $image->size(0, $height_selector->value)->url;
                    $height_attr = ' height="' . $height_selector->value . '"';

                } else {
                    $img = $image->url;
                }

                $img_str = '<img src="' . $img . '"' . $width_attr . $height_attr;

                if($class_selector && $class_selector->value){
                    $img_str .= ' class="' . $class_selector->value . '"';
                }

                $rel_selector = $selectors->get("field=rel");
                if($rel_selector && $rel_selector->value){
                    $img_str .= ' rel="' . $rel_selector->value . '"';
                }

                $id_selector = $selectors->get("field=id");
                if($id_selector && $id_selector->value){
                    $img_str .= ' id="' . $id_selector->value . '"';
                }

                if(strlen($image->description)){
                    $img_str .= ' alt="' . $image->description . '"';
                } else if($descr = $imagepage->get($this->options['imagesDescriptionField'])){
                    $img_str .= strlen($descr) ? ' alt="' . $descr . '"' : '';
                }

                $img_str .= '/>';
                $value = str_replace($match[0], $img_str , $value);
            }
        }
        return $value;
    }



    public function ___parseImages($value) {

        // replace extra whitespace coming from TinyMCE to avoid string replace issues
        $value = preg_replace("#([\"|\'])(\s+/>)#","$1/>", $value);

        $doc = new DOMDocument();
        $doc->formatOutput = false;
        $doc->preserveWhiteSpace = false;

        @$doc->loadHTML($value);

        $tags = $doc->getElementsByTagName('img');
        $replace = array();
        $with = array();



        foreach($tags as $tag) {
            $src = $tag->getAttribute('src');
            $width = $tag->getAttribute('width');
            $height = $tag->getAttribute('height');
            $class = $tag->getAttribute('class');
            $rel = $tag->getAttribute('rel');
            $id = $tag->getAttribute('id');

            if(strlen($src)){
                $path = pathinfo($src);
                $parts = explode("/",$path['dirname']);
                $pageid = $parts[count($parts)-1];
                $imagepage = $this->pages->get($pageid);

                if($imagepage->template == $this->options['imagesPageTemplate']){
                    $orig_tag = $doc->saveXML($tag);

                    $imagetag = "image=$pageid,";
                    $imagetag .= $width ? "width=$width," : "";
                    $imagetag .= $height ? "height=$height," : "";
                    $imagetag .= $class ? "class=$class," : '';
                    $imagetag .= $rel ? "rel=$rel," : '';
                    $imagetag .= $id ? "id=$id," : '';
                    $imagetag = "{". rtrim($imagetag,",") . "}";

                    $replace[] = $orig_tag;
                    $with[] = $imagetag;
                }
            }
        }
        if(!empty($replace)) $value = str_replace($replace, $with, $value);
        return $value;
    }

}
